import org.scalatest.FunSuite

import gov.ornl.stucco.morph.ast._
import gov.ornl.stucco.morph.ast.Implicits._
import gov.ornl.stucco.morph.ast.DSL._
import gov.ornl.stucco.morph.parser._
import gov.ornl.stucco.morph.parser.Interface._
import gov.ornl.stucco.morph.utils.Utils._

import gov.ornl.stucco.extractors._

class ArgusExtractorSuite extends FunSuite {

  // to make testing easier
  val O = ObjectNode
  val A = ArrayNode
  val S = StringNode
  val N = NumberNode

//data from something like this:
//ra -r argus.out -M noman xml -n > argus.out.xml
//with fields line in ra.conf like:
//RA_FIELD_SPECIFIER="stime flgs proto saddr sport dir daddr dport spkts dpkts appbytes abr state:12 nstroke dur"


  test("parse one argus entries, with (unused) mgmt records included") {
    val node = XmlParser("""
    <?xml version ="1.0" encoding="UTF-8"?>
<!--Generated by ra(3.0.7.12) QoSient, LLC-->
<ArgusDataStream
  xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation = "http://qosient.com/argus/Xml/ArgusRecord.3.0.xsd"
  BeginDate = "2013-07-11T10:39:45.800118" CurrentDate = "2013-09-03T12:00:37.513269"
  MajorVersion = "3" MinorVersion = "0" InterfaceType = "DLT_NULL" InterfaceStatus = "Up"
  ArgusSourceId = "0.0.0.0"  NetAddr = "0.0.0.0"  NetMask = "0.0.0.0">

  <ArgusManagementRecord  StartTime = "2013-07-11T10:39:46.136399" Flags = "         " 
    Proto = "man" PktsRcvd = "0" Records = "0"          
    State = "STA" KeyStrokeNStroke = "" Duration = "0.336281"></ArgusManagementRecord>
  <ArgusFlowRecord  StartTime = "2013-07-11T11:09:07.849949" Flags = " e s     " 
    Proto = "tcp" SrcAddr = "10.32.92.5" SrcPort = "23078" Dir = " -&gt;" 
    DstAddr = "172.10.0.6" DstPort = "1984" SrcPkts = "6" DstPkts = "0" AppBytes = "0" AppByteRatio = "-0.000000" 
    State = "REQ" KeyStrokeNStroke = "         " Duration = "9.031365"></ArgusFlowRecord>
  <ArgusManagementRecord  StartTime = "2013-07-11T11:10:00.000000" Flags = "         " 
    Proto = "man" PktsRcvd = "0" Records = "0"          
    State = "STA" KeyStrokeNStroke = "" Duration = "0.336281"></ArgusManagementRecord>
</ArgusDataStream>
      """)
    val argus = ArgusExtractor(node)
    //print(argus)
    
    assert(argus ~> "vertices" ~> 0 ~> "_id" === Some(S("10.32.92.5:23078::172.10.0.6:1984")))
    assert(argus ~> "vertices" ~> 0 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 0 ~> "vertexType" === Some(S("flow")))
    assert(argus ~> "vertices" ~> 0 ~> "source" === Some(S("Argus")))
    assert(argus ~> "vertices" ~> 0 ~> "keyStrokeNStroke" === Some(S("         ")))
    assert(argus ~> "vertices" ~> 0 ~> "proto" === Some(S("tcp")))
    assert(argus ~> "vertices" ~> 0 ~> "appBytes" === Some(N(0)))
    assert(argus ~> "vertices" ~> 0 ~> "state" === Some(S("REQ")))
    assert(argus ~> "vertices" ~> 0 ~> "startTime" === Some(S("2013-07-11T11:09:07.849949")))
    assert(argus ~> "vertices" ~> 0 ~> "appByteRatio" === Some(N(0)))
    assert(argus ~> "vertices" ~> 0 ~> "dir" === Some(S(" ->")))
    assert(argus ~> "vertices" ~> 0 ~> "flags" === Some(S(" e s     ")))
    assert(argus ~> "vertices" ~> 0 ~> "duration" === Some(N(9.031365)))
    assert(argus ~> "vertices" ~> 0 ~> "dstPkts" === Some(N(0)))
    assert(argus ~> "vertices" ~> 0 ~> "srcPkts" === Some(N(6)))

    assert(argus ~> "vertices" ~> 1 ~> "_id" === Some(S("10.32.92.5:23078")))
    assert(argus ~> "vertices" ~> 1 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 1 ~> "vertexType" === Some(S("address")))
    assert(argus ~> "vertices" ~> 1 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 2 ~> "_id" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "vertices" ~> 2 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 2 ~> "vertexType" === Some(S("address")))
    assert(argus ~> "vertices" ~> 2 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 3 ~> "_id" === Some(S("10.32.92.5")))
    assert(argus ~> "vertices" ~> 3 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 3 ~> "vertexType" === Some(S("IP")))
    assert(argus ~> "vertices" ~> 3 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 4 ~> "_id" === Some(S("172.10.0.6")))
    assert(argus ~> "vertices" ~> 4 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 4 ~> "vertexType" === Some(S("IP")))
    assert(argus ~> "vertices" ~> 4 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 5 ~> "_id" === Some(S("23078")))
    assert(argus ~> "vertices" ~> 5 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 5 ~> "vertexType" === Some(S("port")))
    assert(argus ~> "vertices" ~> 5 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 6 ~> "_id" === Some(S("1984")))
    assert(argus ~> "vertices" ~> 6 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 6 ~> "vertexType" === Some(S("port")))
    assert(argus ~> "vertices" ~> 6 ~> "source" === Some(S("Argus")))

    assert(argus ~> "edges" ~> 0 ~> "_id" === Some(S("10.32.92.5:23078::172.10.0.6:1984_srcAddress_10.32.92.5:23078")))
    assert(argus ~> "edges" ~> 0 ~> "_outV" === Some(S("10.32.92.5:23078::172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 0 ~> "_inV" === Some(S("10.32.92.5:23078")))
    assert(argus ~> "edges" ~> 0 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 0 ~> "_label" === Some(S("srcAddress")))
    assert(argus ~> "edges" ~> 0 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 0 ~> "outVType" === Some(S("flow")))
    assert(argus ~> "edges" ~> 0 ~> "inVType" === Some(S("address")))
    
    assert(argus ~> "edges" ~> 1 ~> "_id" === Some(S("10.32.92.5:23078::172.10.0.6:1984_dstAddress_172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 1 ~> "_outV" === Some(S("10.32.92.5:23078::172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 1 ~> "_inV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 1 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 1 ~> "_label" === Some(S("dstAddress")))
    assert(argus ~> "edges" ~> 1 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 1 ~> "outVType" === Some(S("flow")))
    assert(argus ~> "edges" ~> 1 ~> "inVType" === Some(S("address")))

    assert(argus ~> "edges" ~> 2 ~> "_id" === Some(S("10.32.92.5:23078_hasIP_10.32.92.5")))
    assert(argus ~> "edges" ~> 2 ~> "_outV" === Some(S("10.32.92.5:23078")))
    assert(argus ~> "edges" ~> 2 ~> "_inV" === Some(S("10.32.92.5")))
    assert(argus ~> "edges" ~> 2 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 2 ~> "_label" === Some(S("hasIP")))
    assert(argus ~> "edges" ~> 2 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 2 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 2 ~> "inVType" === Some(S("IP")))

    assert(argus ~> "edges" ~> 3 ~> "_id" === Some(S("172.10.0.6:1984_hasIP_172.10.0.6")))
    assert(argus ~> "edges" ~> 3 ~> "_outV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 3 ~> "_inV" === Some(S("172.10.0.6")))
    assert(argus ~> "edges" ~> 3 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 3 ~> "_label" === Some(S("hasIP")))
    assert(argus ~> "edges" ~> 3 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 3 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 3 ~> "inVType" === Some(S("IP")))
    
    assert(argus ~> "edges" ~> 4 ~> "_id" === Some(S("10.32.92.5:23078_hasPort_23078")))
    assert(argus ~> "edges" ~> 4 ~> "_outV" === Some(S("10.32.92.5:23078")))
    assert(argus ~> "edges" ~> 4 ~> "_inV" === Some(S("23078")))
    assert(argus ~> "edges" ~> 4 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 4 ~> "_label" === Some(S("hasPort")))
    assert(argus ~> "edges" ~> 4 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 4 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 4 ~> "inVType" === Some(S("port")))

    assert(argus ~> "edges" ~> 5 ~> "_id" === Some(S("172.10.0.6:1984_hasPort_1984")))
    assert(argus ~> "edges" ~> 5 ~> "_outV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 5 ~> "_inV" === Some(S("1984")))
    assert(argus ~> "edges" ~> 5 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 5 ~> "_label" === Some(S("hasPort")))
    assert(argus ~> "edges" ~> 5 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 5 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 5 ~> "inVType" === Some(S("port")))
  }

  test("parse three argus entries (2 tcp, 1 arp)") {
    val node = XmlParser("""
<?xml version ="1.0" encoding="UTF-8"?>
<!--Generated by ra(3.0.7.12) QoSient, LLC-->
<ArgusDataStream
  xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation = "http://qosient.com/argus/Xml/ArgusRecord.3.0.xsd"
  BeginDate = "2013-07-11T10:39:45.800118" CurrentDate = "2013-09-03T14:08:24.716542"
  MajorVersion = "3" MinorVersion = "0" InterfaceType = "DLT_NULL" InterfaceStatus = "Up"
  ArgusSourceId = "192.168.100.3"  NetAddr = "0.0.0.0"  NetMask = "0.0.0.0">

  <ArgusFlowRecord  StartTime = "2013-07-11T10:39:47.631550" Flags = " e s     " 
    Proto = "tcp" SrcAddr = "10.32.92.10" SrcPort = "60867" Dir = " -&gt;" 
    DstAddr = "172.10.0.6" DstPort = "1984" SrcPkts = "2" DstPkts = "0" AppBytes = "0" AppByteRatio = "-0.000000" 
    State = "REQ" KeyStrokeNStroke = "         " Duration = "0.000005"></ArgusFlowRecord>
  <ArgusFlowRecord  StartTime = "2013-07-11T10:39:52.726116" Flags = " e s     " 
    Proto = "tcp" SrcAddr = "10.32.92.5" SrcPort = "22974" Dir = " -&gt;" 
    DstAddr = "172.10.0.6" DstPort = "1984" SrcPkts = "6" DstPkts = "0" AppBytes = "0" AppByteRatio = "-0.000000" 
    State = "REQ" KeyStrokeNStroke = "         " Duration = "9.000163"></ArgusFlowRecord>
  <ArgusFlowRecord  StartTime = "2013-07-11T10:39:57.585410" Flags = " e       " 
    Proto = "arp" SrcAddr = "10.32.92.5" SrcPort = "" Dir = "who" 
    DstAddr = "10.32.92.1" DstPort = "" SrcPkts = "4" DstPkts = "4" AppBytes = "256" AppByteRatio = "0.000000" 
    State = "CON" KeyStrokeNStroke = "         " Duration = "22.000900"></ArgusFlowRecord>
</ArgusDataStream>
      """)
    val argus = ArgusExtractor(node)
    assert(argus ~> "vertices" ~> 0 ~> "_id" === Some(S("10.32.92.10:60867::172.10.0.6:1984")))
    assert(argus ~> "vertices" ~> 0 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 0 ~> "vertexType" === Some(S("flow")))
    assert(argus ~> "vertices" ~> 0 ~> "source" === Some(S("Argus")))
    assert(argus ~> "vertices" ~> 0 ~> "keyStrokeNStroke" === Some(S("         ")))
    assert(argus ~> "vertices" ~> 0 ~> "proto" === Some(S("tcp")))
    assert(argus ~> "vertices" ~> 0 ~> "appBytes" === Some(N(0)))
    assert(argus ~> "vertices" ~> 0 ~> "state" === Some(S("REQ")))
    assert(argus ~> "vertices" ~> 0 ~> "startTime" === Some(S("2013-07-11T10:39:47.631550")))
    assert(argus ~> "vertices" ~> 0 ~> "appByteRatio" === Some(N(0)))
    assert(argus ~> "vertices" ~> 0 ~> "dir" === Some(S(" ->")))
    assert(argus ~> "vertices" ~> 0 ~> "flags" === Some(S(" e s     ")))
    assert(argus ~> "vertices" ~> 0 ~> "duration" === Some(N(0.000005)))
    assert(argus ~> "vertices" ~> 0 ~> "dstPkts" === Some(N(0)))
    assert(argus ~> "vertices" ~> 0 ~> "srcPkts" === Some(N(2)))

    assert(argus ~> "vertices" ~> 1 ~> "_id" === Some(S("10.32.92.10:60867")))
    assert(argus ~> "vertices" ~> 1 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 1 ~> "vertexType" === Some(S("address")))
    assert(argus ~> "vertices" ~> 1 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 2 ~> "_id" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "vertices" ~> 2 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 2 ~> "vertexType" === Some(S("address")))
    assert(argus ~> "vertices" ~> 2 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 3 ~> "_id" === Some(S("10.32.92.10")))
    assert(argus ~> "vertices" ~> 3 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 3 ~> "vertexType" === Some(S("IP")))
    assert(argus ~> "vertices" ~> 3 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 4 ~> "_id" === Some(S("172.10.0.6")))
    assert(argus ~> "vertices" ~> 4 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 4 ~> "vertexType" === Some(S("IP")))
    assert(argus ~> "vertices" ~> 4 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 5 ~> "_id" === Some(S("60867")))
    assert(argus ~> "vertices" ~> 5 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 5 ~> "vertexType" === Some(S("port")))
    assert(argus ~> "vertices" ~> 5 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 6 ~> "_id" === Some(S("1984")))
    assert(argus ~> "vertices" ~> 6 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 6 ~> "vertexType" === Some(S("port")))
    assert(argus ~> "vertices" ~> 6 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 7 ~> "_id" === Some(S("10.32.92.5:22974::172.10.0.6:1984")))
    assert(argus ~> "vertices" ~> 7 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 7 ~> "vertexType" === Some(S("flow")))
    assert(argus ~> "vertices" ~> 7 ~> "source" === Some(S("Argus")))
    assert(argus ~> "vertices" ~> 7 ~> "keyStrokeNStroke" === Some(S("         ")))
    assert(argus ~> "vertices" ~> 7 ~> "proto" === Some(S("tcp")))
    assert(argus ~> "vertices" ~> 7 ~> "appBytes" === Some(N(0)))
    assert(argus ~> "vertices" ~> 7 ~> "state" === Some(S("REQ")))
    assert(argus ~> "vertices" ~> 7 ~> "startTime" === Some(S("2013-07-11T10:39:52.726116")))
    assert(argus ~> "vertices" ~> 7 ~> "appByteRatio" === Some(N(0)))
    assert(argus ~> "vertices" ~> 7 ~> "dir" === Some(S(" ->")))
    assert(argus ~> "vertices" ~> 7 ~> "flags" === Some(S(" e s     ")))
    assert(argus ~> "vertices" ~> 7 ~> "duration" === Some(N(9.000163)))
    assert(argus ~> "vertices" ~> 7 ~> "dstPkts" === Some(N(0)))
    assert(argus ~> "vertices" ~> 7 ~> "srcPkts" === Some(N(6)))

    assert(argus ~> "vertices" ~> 8 ~> "_id" === Some(S("10.32.92.5:22974")))
    assert(argus ~> "vertices" ~> 8 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 8 ~> "vertexType" === Some(S("address")))
    assert(argus ~> "vertices" ~> 8 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 9 ~> "_id" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "vertices" ~> 9 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 9 ~> "vertexType" === Some(S("address")))
    assert(argus ~> "vertices" ~> 9 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 10 ~> "_id" === Some(S("10.32.92.5")))
    assert(argus ~> "vertices" ~> 10 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 10 ~> "vertexType" === Some(S("IP")))
    assert(argus ~> "vertices" ~> 10 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 11 ~> "_id" === Some(S("172.10.0.6")))
    assert(argus ~> "vertices" ~> 11 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 11 ~> "vertexType" === Some(S("IP")))
    assert(argus ~> "vertices" ~> 11 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 12 ~> "_id" === Some(S("22974")))
    assert(argus ~> "vertices" ~> 12 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 12 ~> "vertexType" === Some(S("port")))
    assert(argus ~> "vertices" ~> 12 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 13 ~> "_id" === Some(S("1984")))
    assert(argus ~> "vertices" ~> 13 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 13 ~> "vertexType" === Some(S("port")))
    assert(argus ~> "vertices" ~> 13 ~> "source" === Some(S("Argus")))

    //the last entry is arp, it has no s/d ports, and will generate almost no nodes/edges

    assert(argus ~> "vertices" ~> 14 ~> "_id" === Some(S("10.32.92.5")))
    assert(argus ~> "vertices" ~> 14 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 14 ~> "vertexType" === Some(S("IP")))
    assert(argus ~> "vertices" ~> 14 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 15 ~> "_id" === Some(S("10.32.92.1")))
    assert(argus ~> "vertices" ~> 15 ~> "_type" === Some(S("vertex")))
    assert(argus ~> "vertices" ~> 15 ~> "vertexType" === Some(S("IP")))
    assert(argus ~> "vertices" ~> 15 ~> "source" === Some(S("Argus")))

    assert(argus ~> "vertices" ~> 16 === None)

    assert(argus ~> "edges" ~> 0 ~> "_id" === Some(S("10.32.92.10:60867::172.10.0.6:1984_srcAddress_10.32.92.10:60867")))
    assert(argus ~> "edges" ~> 0 ~> "_outV" === Some(S("10.32.92.10:60867::172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 0 ~> "_inV" === Some(S("10.32.92.10:60867")))
    assert(argus ~> "edges" ~> 0 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 0 ~> "_label" === Some(S("srcAddress")))
    assert(argus ~> "edges" ~> 0 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 0 ~> "outVType" === Some(S("flow")))
    assert(argus ~> "edges" ~> 0 ~> "inVType" === Some(S("address")))
    
    assert(argus ~> "edges" ~> 1 ~> "_id" === Some(S("10.32.92.10:60867::172.10.0.6:1984_dstAddress_172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 1 ~> "_outV" === Some(S("10.32.92.10:60867::172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 1 ~> "_inV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 1 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 1 ~> "_label" === Some(S("dstAddress")))
    assert(argus ~> "edges" ~> 1 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 1 ~> "outVType" === Some(S("flow")))
    assert(argus ~> "edges" ~> 1 ~> "inVType" === Some(S("address")))

    assert(argus ~> "edges" ~> 2 ~> "_id" === Some(S("10.32.92.10:60867_hasIP_10.32.92.10")))
    assert(argus ~> "edges" ~> 2 ~> "_outV" === Some(S("10.32.92.10:60867")))
    assert(argus ~> "edges" ~> 2 ~> "_inV" === Some(S("10.32.92.10")))
    assert(argus ~> "edges" ~> 2 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 2 ~> "_label" === Some(S("hasIP")))
    assert(argus ~> "edges" ~> 2 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 2 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 2 ~> "inVType" === Some(S("IP")))

    assert(argus ~> "edges" ~> 3 ~> "_id" === Some(S("172.10.0.6:1984_hasIP_172.10.0.6")))
    assert(argus ~> "edges" ~> 3 ~> "_outV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 3 ~> "_inV" === Some(S("172.10.0.6")))
    assert(argus ~> "edges" ~> 3 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 3 ~> "_label" === Some(S("hasIP")))
    assert(argus ~> "edges" ~> 3 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 3 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 3 ~> "inVType" === Some(S("IP")))
    
    assert(argus ~> "edges" ~> 4 ~> "_id" === Some(S("10.32.92.10:60867_hasPort_60867")))
    assert(argus ~> "edges" ~> 4 ~> "_outV" === Some(S("10.32.92.10:60867")))
    assert(argus ~> "edges" ~> 4 ~> "_inV" === Some(S("60867")))
    assert(argus ~> "edges" ~> 4 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 4 ~> "_label" === Some(S("hasPort")))
    assert(argus ~> "edges" ~> 4 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 4 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 4 ~> "inVType" === Some(S("port")))

    assert(argus ~> "edges" ~> 5 ~> "_id" === Some(S("172.10.0.6:1984_hasPort_1984")))
    assert(argus ~> "edges" ~> 5 ~> "_outV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 5 ~> "_inV" === Some(S("1984")))
    assert(argus ~> "edges" ~> 5 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 5 ~> "_label" === Some(S("hasPort")))
    assert(argus ~> "edges" ~> 5 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 5 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 5 ~> "inVType" === Some(S("port")))

    assert(argus ~> "edges" ~> 6 ~> "_id" === Some(S("10.32.92.5:22974::172.10.0.6:1984_srcAddress_10.32.92.5:22974")))
    assert(argus ~> "edges" ~> 6 ~> "_outV" === Some(S("10.32.92.5:22974::172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 6 ~> "_inV" === Some(S("10.32.92.5:22974")))
    assert(argus ~> "edges" ~> 6 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 6 ~> "_label" === Some(S("srcAddress")))
    assert(argus ~> "edges" ~> 6 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 6 ~> "outVType" === Some(S("flow")))
    assert(argus ~> "edges" ~> 6 ~> "inVType" === Some(S("address")))
    
    assert(argus ~> "edges" ~> 7 ~> "_id" === Some(S("10.32.92.5:22974::172.10.0.6:1984_dstAddress_172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 7 ~> "_outV" === Some(S("10.32.92.5:22974::172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 7 ~> "_inV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 7 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 7 ~> "_label" === Some(S("dstAddress")))
    assert(argus ~> "edges" ~> 7 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 7 ~> "outVType" === Some(S("flow")))
    assert(argus ~> "edges" ~> 7 ~> "inVType" === Some(S("address")))

    assert(argus ~> "edges" ~> 8 ~> "_id" === Some(S("10.32.92.5:22974_hasIP_10.32.92.5")))
    assert(argus ~> "edges" ~> 8 ~> "_outV" === Some(S("10.32.92.5:22974")))
    assert(argus ~> "edges" ~> 8 ~> "_inV" === Some(S("10.32.92.5")))
    assert(argus ~> "edges" ~> 8 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 8 ~> "_label" === Some(S("hasIP")))
    assert(argus ~> "edges" ~> 8 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 8 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 8 ~> "inVType" === Some(S("IP")))

    assert(argus ~> "edges" ~> 9 ~> "_id" === Some(S("172.10.0.6:1984_hasIP_172.10.0.6")))
    assert(argus ~> "edges" ~> 9 ~> "_outV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 9 ~> "_inV" === Some(S("172.10.0.6")))
    assert(argus ~> "edges" ~> 9 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 9 ~> "_label" === Some(S("hasIP")))
    assert(argus ~> "edges" ~> 9 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 9 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 9 ~> "inVType" === Some(S("IP")))
    
    assert(argus ~> "edges" ~> 10 ~> "_id" === Some(S("10.32.92.5:22974_hasPort_22974")))
    assert(argus ~> "edges" ~> 10 ~> "_outV" === Some(S("10.32.92.5:22974")))
    assert(argus ~> "edges" ~> 10 ~> "_inV" === Some(S("22974")))
    assert(argus ~> "edges" ~> 10 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 10 ~> "_label" === Some(S("hasPort")))
    assert(argus ~> "edges" ~> 10 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 10 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 10 ~> "inVType" === Some(S("port")))

    assert(argus ~> "edges" ~> 11 ~> "_id" === Some(S("172.10.0.6:1984_hasPort_1984")))
    assert(argus ~> "edges" ~> 11 ~> "_outV" === Some(S("172.10.0.6:1984")))
    assert(argus ~> "edges" ~> 11 ~> "_inV" === Some(S("1984")))
    assert(argus ~> "edges" ~> 11 ~> "_type" === Some(S("edge")))
    assert(argus ~> "edges" ~> 11 ~> "_label" === Some(S("hasPort")))
    assert(argus ~> "edges" ~> 11 ~> "source" === Some(S("Argus")))
    assert(argus ~> "edges" ~> 11 ~> "outVType" === Some(S("address")))
    assert(argus ~> "edges" ~> 11 ~> "inVType" === Some(S("port")))

    //last entry will generate no edges, see above.
    assert(argus ~> "edges" ~> 12 === None)

  }


}

